import { expect, it } from 'vitest'
import { createProject, getTestExtract, type TestExtractOptions } from './create-project'
// @ts-ignore
import { default as ThemeSample } from './samples/theme?raw'

const project = createProject()
const getExtract = (code: string, options: TestExtractOptions) => getTestExtract(project, code, options)

it('can extract theme with tokens from another package with declaration files', () => {
  const extracted = getExtract(ThemeSample, { functionNameList: ['defineProperties'] })
  const defineProperties = extracted.get('defineProperties')!

  expect(defineProperties.nodesByProp).toMatchInlineSnapshot(`
    Map {
      "conditions" => [
        BoxNodeMap {
          "node": ObjectLiteralExpression,
          "spreadConditions": undefined,
          "stack": [
            CallExpression,
            ObjectLiteralExpression,
            PropertyAssignment,
            ObjectLiteralExpression,
          ],
          "type": "map",
          "value": Map {
            "mobile" => BoxNodeObject {
              "isEmpty": undefined,
              "node": CallExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                SpreadAssignment,
                CallExpression,
              ],
              "type": "object",
              "value": {
                "@media": "screen and (max-width: 599px)",
              },
            },
            "tablet" => BoxNodeObject {
              "isEmpty": undefined,
              "node": CallExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                SpreadAssignment,
                CallExpression,
              ],
              "type": "object",
              "value": {
                "@media": "screen and (min-width: 600px) and (max-width: 1023px)",
              },
            },
            "desktop" => BoxNodeObject {
              "isEmpty": undefined,
              "node": CallExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                SpreadAssignment,
                CallExpression,
              ],
              "type": "object",
              "value": {
                "@media": "screen and (min-width: 1024px)",
              },
            },
            "default" => BoxNodeObject {
              "isEmpty": true,
              "node": ObjectLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "object",
              "value": {},
            },
            "hover" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:hover,&[data-hover]",
                },
              },
            },
            "active" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:active,&[data-active]",
                },
              },
            },
            "focus" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:focus,&[data-focus]",
                },
              },
            },
            "highlighted" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-highlighted]",
                },
              },
            },
            "focusWithin" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:focus-within",
                },
              },
            },
            "focusVisible" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:focus-visible",
                },
              },
            },
            "disabled" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[disabled],&[aria-disabled=true],&[data-disabled]",
                },
              },
            },
            "readOnly" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-readonly=true],&[readonly],&[data-readonly]",
                },
              },
            },
            "before" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&::before",
                },
              },
            },
            "after" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&::after",
                },
              },
            },
            "empty" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:empty",
                },
              },
            },
            "expanded" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-expanded=true]",
                },
              },
            },
            "checked" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-checked=true],&[data-checked]",
                },
              },
            },
            "grabbed" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-grabbed=true],&[data-grabbed]",
                },
              },
            },
            "pressed" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-pressed=true],&[data-pressed]",
                },
              },
            },
            "invalid" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-invalid=true],&[data-invalid]",
                },
              },
            },
            "valid" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-invalid=false],&[data-valid]",
                },
              },
            },
            "loading" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-busy=true],&[data-loading]",
                },
              },
            },
            "selected" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-selected=true],&[data-selected]",
                },
              },
            },
            "hidden" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-hidden=true],&[data-hidden]",
                },
              },
            },
            "autofill" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:-webkit-autofill",
                },
              },
            },
            "even" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:nth-of-type(even)",
                },
              },
            },
            "odd" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:nth-of-type(odd)",
                },
              },
            },
            "first" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:first-of-type",
                },
              },
            },
            "last" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:last-of-type",
                },
              },
            },
            "notFirst" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:not(:first-of-type)",
                },
              },
            },
            "notLast" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:not(:last-of-type)",
                },
              },
            },
            "visited" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:visited",
                },
              },
            },
            "activeLink" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-current=page]",
                },
              },
            },
            "activeStep" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[aria-current=step]",
                },
              },
            },
            "indeterminate" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:indeterminate,&[aria-checked=mixed],&[data-indeterminate]",
                },
              },
            },
            "groupHover" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:hover &,[role=group][data-hover] &,[data-group]:hover &,[data-group][data-hover] &,.group:hover &,.group[data-hover] &",
                },
              },
            },
            "peerHover" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[data-peer]:hover ~ &, [data-peer][data-hover] ~ &, .peer:hover ~ &, .peer[data-hover] ~ &",
                },
              },
            },
            "groupFocus" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:focus &,[role=group][data-focus] &,[data-group]:focus &,[data-group][data-focus] &,.group:focus &,.group[data-focus] &",
                },
              },
            },
            "peerFocus" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[data-peer]:focus ~ &, [data-peer][data-focus] ~ &, .peer:focus ~ &, .peer[data-focus] ~ &",
                },
              },
            },
            "groupFocusVisible" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[role=group]:focus-visible[data-group]:focus-visible.group:focus-visible",
                },
              },
            },
            "peerFocusVisible" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[data-peer]:focus-visible ~ &, .peer:focus-visible ~ &",
                },
              },
            },
            "groupActive" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:active &,[role=group][data-active] &,[data-group]:active &,[data-group][data-active] &,.group:active &,.group[data-active] &",
                },
              },
            },
            "peerActive" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[data-peer]:active ~ &, [data-peer][data-active] ~ &, .peer:active ~ &, .peer[data-active] ~ &",
                },
              },
            },
            "groupDisabled" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:disabled &,[role=group][data-disabled] &,[data-group]:disabled &,[data-group][data-disabled] &,.group:disabled &,.group[data-disabled] &",
                },
              },
            },
            "peerDisabled" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-peer]:disabled ~ &,[data-peer][data-disabled] ~ &,.peer:disabled ~ &,.peer[data-disabled] ~ &",
                },
              },
            },
            "groupInvalid" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:invalid &,[role=group][data-invalid] &,[data-group]:invalid &,[data-group][data-invalid] &,.group:invalid &,.group[data-invalid] &",
                },
              },
            },
            "peerInvalid" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-peer]:invalid ~ &,[data-peer][data-invalid] ~ &,.peer:invalid ~ &,.peer[data-invalid] ~ &",
                },
              },
            },
            "groupChecked" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "[role=group]:checked &,[role=group][data-checked] &,[data-group]:checked &,[data-group][data-checked] &,.group:checked &,.group[data-checked] &",
                },
              },
            },
            "peerChecked" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-peer]:checked ~ &,[data-peer][data-checked] ~ &,.peer:checked ~ &,.peer[data-checked] ~ &",
                },
              },
            },
            "groupFocusWithin" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[role=group]:focus-within &, [data-group]:focus-within &, .group:focus-within &",
                },
              },
            },
            "peerFocusWithin" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-peer]:focus-within ~ &,.peer:focus-within ~ &",
                },
              },
            },
            "peerPlaceholderShown" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-peer]::placeholder-shown ~ &,.peer::placeholder-shown ~ &",
                },
              },
            },
            "placeholder" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&::placeholder",
                },
              },
            },
            "placeholderShown" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&::placeholder-shown",
                },
              },
            },
            "fullScreen" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&:fullscreen",
                },
              },
            },
            "selection" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&::selection",
                },
              },
            },
            "rtl" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[dir=rtl] &,&[dir=rtl]",
                },
              },
            },
            "ltr" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[dir=ltr] &,&[dir=ltr]",
                },
              },
            },
            "mediaDark" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "@media" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "(prefers-color-scheme: dark)",
                },
              },
            },
            "mediaReduceMotion" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "@media" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "(prefers-reduced-motion: reduce)",
                },
              },
            },
            "dark" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-theme=dark] &,&[data-theme=dark]",
                },
              },
            },
            "light" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "selector" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "&[data-theme=light] &,&[data-theme=light]",
                },
              },
            },
          },
        },
      ],
      "properties" => [
        BoxNodeMap {
          "node": ObjectLiteralExpression,
          "spreadConditions": undefined,
          "stack": [
            CallExpression,
            ObjectLiteralExpression,
            PropertyAssignment,
            ObjectLiteralExpression,
          ],
          "type": "map",
          "value": Map {
            "boxShadow" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
                "base": "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
                "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px",
                "inner": "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
                "lg": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                "md": "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
                "none": "none",
                "outline": "0 0 0 3px rgba(66, 153, 225, 0.6)",
                "sm": "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
                "xl": "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
                "xs": "0 0 0 1px rgba(0, 0, 0, 0.05)",
              },
            },
            "textShadow" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
                "base": "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
                "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px",
                "inner": "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
                "lg": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                "md": "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
                "none": "none",
                "outline": "0 0 0 3px rgba(66, 153, 225, 0.6)",
                "sm": "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
                "xl": "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
                "xs": "0 0 0 1px rgba(0, 0, 0, 0.05)",
              },
            },
            "opacity" => BoxNodeMap {
              "node": ObjectLiteralExpression,
              "spreadConditions": undefined,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
              ],
              "type": "map",
              "value": Map {
                "0" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "0",
                },
                "0.4" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "0.6",
                },
                "0.6" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "0.6",
                },
                "1" => BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    StringLiteral,
                  ],
                  "type": "literal",
                  "value": "1",
                },
              },
            },
            "cursor" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "pointerEvents" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "userSelect" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "fontFamily" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
                PropertySignature,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "body": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\"",
                "heading": "-apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\"",
                "mono": "SFMono-Regular,Menlo,Monaco,Consolas,\\"Liberation Mono\\",\\"Courier New\\",monospace",
              },
            },
            "fontWeight" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
                PropertySignature,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "900",
                "bold": "700",
                "extrabold": "800",
                "hairline": "100",
                "light": "300",
                "medium": "500",
                "normal": "400",
                "semibold": "600",
                "thin": "200",
              },
            },
            "lineHeight" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
                PropertySignature,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "10": "2.5rem",
                "3": ".75rem",
                "4": "1rem",
                "5": "1.25rem",
                "6": "1.5rem",
                "7": "1.75rem",
                "8": "2rem",
                "9": "2.25rem",
                "base": "1.5",
                "none": "1",
                "normal": "normal",
                "short": "1.375",
                "shorter": "1.25",
                "tall": "1.625",
                "taller": "2",
              },
            },
            "letterSpacing" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
                PropertySignature,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "normal": "0",
                "tight": "-0.025em",
                "tighter": "-0.05em",
                "wide": "0.025em",
                "wider": "0.05em",
                "widest": "0.1em",
              },
            },
            "textAlign" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "fontStyle" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "textTransform" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "textDecoration" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "position" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "display" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "flexDirection" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "flexShrink" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "flexGrow" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "flex" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "flexWrap" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "justifyContent" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "justifySelf" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "alignItems" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "alignSelf" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "top" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "bottom" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "left" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "right" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "inset" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "width" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "minWidth" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "maxWidth" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "height" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "minHeight" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "maxHeight" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "whiteSpace" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "textOverflow" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "overflow" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "overflowX" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "overflowY" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "visibility" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "verticalAlign" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "borderStyle" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "borderRadius" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "1rem",
                "3xl": "1.5rem",
                "base": "0.25rem",
                "full": "9999px",
                "lg": "0.5rem",
                "md": "0.375rem",
                "none": "0",
                "sm": "0.125rem",
                "xl": "0.75rem",
              },
            },
            "borderTopLeftRadius" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "1rem",
                "3xl": "1.5rem",
                "base": "0.25rem",
                "full": "9999px",
                "lg": "0.5rem",
                "md": "0.375rem",
                "none": "0",
                "sm": "0.125rem",
                "xl": "0.75rem",
              },
            },
            "borderTopRightRadius" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "1rem",
                "3xl": "1.5rem",
                "base": "0.25rem",
                "full": "9999px",
                "lg": "0.5rem",
                "md": "0.375rem",
                "none": "0",
                "sm": "0.125rem",
                "xl": "0.75rem",
              },
            },
            "borderBottomLeftRadius" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "1rem",
                "3xl": "1.5rem",
                "base": "0.25rem",
                "full": "9999px",
                "lg": "0.5rem",
                "md": "0.375rem",
                "none": "0",
                "sm": "0.125rem",
                "xl": "0.75rem",
              },
            },
            "borderBottomRightRadius" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "2xl": "1rem",
                "3xl": "1.5rem",
                "base": "0.25rem",
                "full": "9999px",
                "lg": "0.5rem",
                "md": "0.375rem",
                "none": "0",
                "sm": "0.125rem",
                "xl": "0.75rem",
              },
            },
            "color" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "background" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "backgroundColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "borderColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "borderTopColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "borderBottomColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "borderLeftColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "borderRightColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "outlineColor" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "fill" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "stroke" => BoxNodeObject {
              "isEmpty": undefined,
              "node": TypeLiteral,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                Identifier,
                Identifier,
                VariableDeclaration,
                PropertyAccessExpression,
                Identifier,
                Identifier,
                VariableDeclaration,
                TypeLiteral,
              ],
              "type": "object",
              "value": {
                "black": "#000000",
                "current": "currentColor",
                "transparent": "transparent",
                "white": "#FFFFFF",
                "whiteAlpha": {
                  "100": "rgba(255, 255, 255, 0.06)",
                  "200": "rgba(255, 255, 255, 0.08)",
                  "300": "rgba(255, 255, 255, 0.16)",
                  "400": "rgba(255, 255, 255, 0.24)",
                  "50": "rgba(255, 255, 255, 0.04)",
                  "500": "rgba(255, 255, 255, 0.36)",
                  "600": "rgba(255, 255, 255, 0.48)",
                  "700": "rgba(255, 255, 255, 0.64)",
                  "800": "rgba(255, 255, 255, 0.80)",
                  "900": "rgba(255, 255, 255, 0.92)",
                },
              },
            },
            "transform" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
            "transformOrigin" => BoxNodeLiteral {
              "kind": "boolean",
              "node": TrueKeyword,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                TrueKeyword,
              ],
              "type": "literal",
              "value": true,
            },
          },
        },
      ],
      "shorthands" => [
        BoxNodeMap {
          "node": ObjectLiteralExpression,
          "spreadConditions": undefined,
          "stack": [
            CallExpression,
            ObjectLiteralExpression,
            PropertyAssignment,
            ObjectLiteralExpression,
          ],
          "type": "map",
          "value": Map {
            "d" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "display",
                },
              ],
            },
            "pos" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "position",
                },
              ],
            },
            "t" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "top",
                },
              ],
            },
            "b" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "bottom",
                },
              ],
            },
            "l" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "left",
                },
              ],
            },
            "r" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "right",
                },
              ],
            },
            "boxSize" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "width",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "height",
                },
              ],
            },
            "w" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "width",
                },
              ],
            },
            "h" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "height",
                },
              ],
            },
            "minW" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "minWidth",
                },
              ],
            },
            "maxW" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "maxWidth",
                },
              ],
            },
            "minH" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "minHeight",
                },
              ],
            },
            "maxH" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "maxHeight",
                },
              ],
            },
            "placeItems" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "justifyContent",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "alignItems",
                },
              ],
            },
            "ta" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "textAlign",
                },
              ],
            },
            "tt" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "textTransform",
                },
              ],
            },
            "fs" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "fontSize",
                },
              ],
            },
            "fw" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "fontWeight",
                },
              ],
            },
            "m" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "margin",
                },
              ],
            },
            "mt" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginTop",
                },
              ],
            },
            "mr" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginRight",
                },
              ],
            },
            "mb" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginBottom",
                },
              ],
            },
            "ml" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginLeft",
                },
              ],
            },
            "mx" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginRight",
                },
              ],
            },
            "my" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginBottom",
                },
              ],
            },
            "ms" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginInlineStart",
                },
              ],
            },
            "me" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginInlineEnd",
                },
              ],
            },
            "p" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "padding",
                },
              ],
            },
            "marginX" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginRight",
                },
              ],
            },
            "marginY" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "marginBottom",
                },
              ],
            },
            "pt" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingTop",
                },
              ],
            },
            "pr" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingRight",
                },
              ],
            },
            "pb" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingBottom",
                },
              ],
            },
            "pl" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingLeft",
                },
              ],
            },
            "px" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingRight",
                },
              ],
            },
            "paddingX" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingRight",
                },
              ],
            },
            "paddingY" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingBottom",
                },
              ],
            },
            "ps" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingInlineStart",
                },
              ],
            },
            "pe" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingInlineEnd",
                },
              ],
            },
            "py" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "paddingBottom",
                },
              ],
            },
            "bw" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderWidth",
                },
              ],
            },
            "bx" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderRight",
                },
              ],
            },
            "borderX" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderLeft",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderRight",
                },
              ],
            },
            "by" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderBottom",
                },
              ],
            },
            "borderY" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderTop",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderBottom",
                },
              ],
            },
            "bg" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "background",
                },
              ],
            },
            "bgColor" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "backgroundColor",
                },
              ],
            },
            "borderXColor" => BoxNodeArray {
              "node": ArrayLiteralExpression,
              "stack": [
                CallExpression,
                ObjectLiteralExpression,
                PropertyAssignment,
                ObjectLiteralExpression,
                PropertyAssignment,
                ArrayLiteralExpression,
              ],
              "type": "array",
              "value": [
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderLeftColor",
                },
                BoxNodeLiteral {
                  "kind": "string",
                  "node": StringLiteral,
                  "stack": [
                    CallExpression,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ObjectLiteralExpression,
                    PropertyAssignment,
                    ArrayLiteralExpression,
                  ],
                  "type": "literal",
                  "value": "borderRightColor",
                },
              ],
            },
          },
        },
      ],
    }
  `)
})
