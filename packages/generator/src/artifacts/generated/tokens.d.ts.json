{
  "content": "import type { Recursive } from './shared'\n\nexport type TokenStatus = 'deprecated' | 'experimental' | 'new'\n\nexport type Token<Value = any> = {\n  value: Value\n  description?: string\n  type?: string\n  extensions?: {\n    status?: TokenStatus\n    [key: string]: any\n  }\n}\n\ntype RecursiveToken<C extends string, V> =\n  | V\n  | {\n      [K in C]: RecursiveToken<C, V>\n    }\n\nexport type SemanticToken<Value = string, Condition extends string = string> = Token<RecursiveToken<Condition, Value>>\n\n/* -----------------------------------------------------------------------------\n * Token data types\n * -----------------------------------------------------------------------------*/\n\ntype BorderStyle =\n  | 'dashed'\n  | 'dotted'\n  | 'double'\n  | 'groove'\n  | 'hidden'\n  | 'inset'\n  | 'none'\n  | 'outset'\n  | 'ridge'\n  | 'solid'\n\ntype Border = {\n  color: string\n  width: string | number\n  style: BorderStyle\n}\n\ntype Shadow = {\n  offsetX: number\n  offsetY: number\n  blur: number\n  spread: number\n  color: string\n  inset?: boolean\n}\n\ntype Gradient = {\n  type: 'linear' | 'radial'\n  placement: string | number\n  stops:\n    | Array<{\n        color: string\n        position: number\n      }>\n    | Array<string>\n}\n\ntype Asset = { type: 'url' | 'svg'; value: string }\n\nexport type TokenDataTypes = {\n  zIndex: number\n  opacity: number\n  colors: string\n  fonts: string | string[]\n  fontSizes: string\n  fontWeights: string | number\n  lineHeights: string | number\n  letterSpacings: string\n  sizes: string\n  shadows: Shadow | Shadow[] | string | string[]\n  spacing: string | number\n  radii: string\n  borders: string | Border\n  durations: string\n  easings: string | number[]\n  animations: string\n  blurs: string\n  gradients: string | Gradient\n  breakpoints: string\n  assets: string | Asset\n}\n\nexport type Tokens = {\n  [key in keyof TokenDataTypes]?: Recursive<Token<TokenDataTypes[key]>>\n}\n\nexport type SemanticTokens<ConditionKey extends string = string> = {\n  [key in keyof TokenDataTypes]?: Recursive<SemanticToken<TokenDataTypes[key], ConditionKey>>\n}\n\nexport type TokenCategory = keyof TokenDataTypes\n"
}