{
  "content": "export type Primitive = string | number | boolean | null | undefined\n\nexport type LiteralUnion<T, K extends Primitive = string> = T | (K & Record<never, never>)\n\nexport type Recursive<T> = { [key: string]: T | Recursive<T> }\n\nexport type Entry<T> = [keyof T, T[keyof T]]\n\nexport type Dict<T = any> = Record<string, T>\n\nexport type RequiredBy<T, K extends keyof T> = Partial<Omit<T, K>> & Required<Pick<T, K>>\n\nexport type AnyFunction<T = any> = (...args: T[]) => any\n\nexport type StringKeyOf<T> = Extract<keyof T, string>\n\ntype DeepPartial<T> = {\n  [P in keyof T]+?: DeepPartial<T[P]>\n}\n\nexport type Extendable<T> = T | { extend?: T | DeepPartial<T> }\n\ntype Nullable<T> = T | null | undefined\n\nexport type UnwrapExtend<T extends Record<string, unknown>> = {\n  [K in keyof T]: T[K] extends Nullable<Extendable<infer U>> ? U : T[K]\n}\n\nexport type Artifact = Nullable<{\n  dir?: string[]\n  files: Array<{\n    file: string\n    code: string | undefined\n  }>\n}>\n"
}