{
  "content": "interface WithConditions {\n  /**\n   * The css conditions to generate for the rule.\n   * @example ['hover', 'focus']\n   */\n  conditions?: string[]\n  responsive?: boolean\n}\n\nexport interface CssRule extends WithConditions {\n  /**\n   * The css properties to generate utilities for.\n   * @example ['margin', 'padding']\n   */\n  properties: {\n    [property: string]: Array<string | number>\n  }\n}\n\ninterface RecipeRuleVariants {\n  [variant: string]: boolean | string[]\n}\n\nexport type RecipeRule = '*' | (RecipeRuleVariants & WithConditions)\nexport type PatternRule = '*' | CssRule\n\nexport interface StaticCssOptions {\n  /**\n   * The css utility classes to generate.\n   */\n  css?: CssRule[]\n  /**\n   * The css recipes to generate.\n   */\n  recipes?:\n    | '*'\n    | {\n        [recipe: string]: RecipeRule[]\n      }\n  /**\n   * The css patterns to generate.\n   */\n  patterns?: {\n    [pattern: string]: PatternRule[]\n  }\n  /**\n   * The CSS themes to generate\n   */\n  themes?: string[]\n}\n"
}